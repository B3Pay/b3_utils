type ApproveError = variant {
  GenericError : record { message : text; error_code : nat };
  TemporarilyUnavailable;
  Duplicate : record { duplicate_of : nat };
  BadFee : record { expected_fee : nat };
  AllowanceChanged : record { current_allowance : nat };
  CreatedInFuture : record { ledger_time : nat64 };
  TooOld;
  Expired : record { ledger_time : nat64 };
  InsufficientFunds : record { balance : nat };
};
type Result = variant { Ok : nat; Err : ApproveError };
type Result_1 = variant { Ok : RetrieveEthRequest; Err : WithdrawalError };
type RetrieveEthRequest = record { block_index : nat };
type WithdrawalError = variant {
  TemporarilyUnavailable : text;
  InsufficientAllowance : record { allowance : nat };
  AmountTooLow : record { min_withdrawal_amount : nat };
  InsufficientFunds : record { balance : nat };
};
service : {
  approve : (nat) -> (Result);
  balance : () -> (nat);
  deposit_principal : () -> (text) query;
  withdraw_eth : (nat, text) -> (Result_1);
}
