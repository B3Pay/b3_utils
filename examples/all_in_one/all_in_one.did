type HttpRequest = record {
  url : text;
  method : text;
  body : vec nat8;
  headers : vec record { text; text };
};
type HttpResponse = record {
  body : vec nat8;
  headers : vec record { text; text };
  status_code : nat16;
};
type LogEntry = record {
  counter : nat64;
  file : text;
  line : nat32;
  cycle : opt nat;
  version : text;
  message : text;
  timestamp : nat64;
  "variant" : LogVariant;
};
type LogVariant = variant { info; warn; error };
type PartitionDetail = record { id : nat8; name : text; size : nat64 };
type Task = variant {
  GetLatestExternalTransfer : text;
  VerifyTransaction : text;
  GetTransactionReceiptFrom : text;
  GetTransactionValue : text;
};
type TaskTimerEntry = record { task : Task; time : nat64 };
service : () -> {
  change_owner : (principal) -> ();
  get_external_transfers : () -> (vec text) query;
  get_latest_external_transfer : (text) -> (text);
  get_partition_details : () -> (vec PartitionDetail) query;
  get_receipt_list : () -> (vec text) query;
  get_timers : () -> (vec TaskTimerEntry) query;
  get_transaction_list : () -> (vec text) query;
  get_transaction_receipt_from : (text) -> (text);
  get_transaction_value : (text) -> (text);
  http_request : (HttpRequest) -> (HttpResponse) query;
  owner : () -> (principal) query;
  print_log_entries : () -> (vec LogEntry) query;
  schedule_task : (nat64, Task) -> ();
  start_timer : () -> ();
  stop_timer : () -> ();
  verify_transaction : (text) -> (nat, text);
}
