#[cfg(test)]
mod test {
    use crate::{receipt, transaction};

    #[test]
    fn serde_test_string() {
        let json_data = r#"{"jsonrpc":"2.0","id":1,"result":{"blockHash":"0x1a80bdc4683bd4140d286307cb05ea28eef7d445a0142c8b3cedd24758ec992a","blockNumber":"0x43b63b","hash":"0x2b6058ea2eea44405a6362109f3365825a2e03e6308f1ea4a2ccaf0d5f8e6f24","accessList":[],"chainId":"0xaa36a7","from":"0x712e3a792c974b3e3dbe41229ad4290791c75a82","gas":"0x5208","gasPrice":"0x9502f910","input":"0x","maxFeePerGas":"0x9502f920","maxPriorityFeePerGas":"0x9502f900","nonce":"0xaf08","r":"0xc2a5c6c60eacc865599cac2ef74fa13e8436ccc657d533debce76ba2beef1181","s":"0x47682ffdf4d2826b87f154e9af63a7f66c4d57e12ea56f67ac641237a07ffa08","to":"0xb51f94aeeebe55a3760e8169a22e536ebd3a6dcb","transactionIndex":"0x3","type":"0x2","v":"0x1","value":"0x16345785d8a0000"}}"#;

        // Deserialize and handle errors gracefully
        match serde_json::from_str::<transaction::Root>(json_data) {
            Ok(deserialized) => println!("Deserialized data: {:?}", deserialized),
            Err(e) => println!("An error occurred: {}", e),
        }
    }

    #[test]
    fn serde_test_transaction_bytes() {
        #[rustfmt::skip]
        let body = [123, 34, 106, 115, 111, 110, 114, 112, 99, 34, 58, 34, 50, 46, 48, 34, 44, 34, 105, 100, 34, 58, 49, 44, 34, 114, 101, 115, 117, 108, 116, 34, 58, 123, 34, 98, 108, 111, 99, 107, 72, 97, 115, 104, 34, 58, 34, 48, 120, 56, 49, 102, 102, 99, 57, 53, 101, 48, 56, 49, 101, 102, 102, 48, 98, 100, 57, 97, 53, 57, 48, 57, 52, 52, 99, 99, 51, 54, 49, 99, 48, 57, 54, 52, 57, 51, 101, 54, 100, 53, 102, 54, 98, 57, 97, 56, 53, 57, 97, 54, 101, 51, 53, 102, 98, 50, 55, 50, 102, 97, 57, 57, 100, 34, 44, 34, 98, 108, 111, 99, 107, 78, 117, 109, 98, 101, 114, 34, 58, 34, 48, 120, 52, 51, 99, 99, 101, 55, 34, 44, 34, 104, 97, 115, 104, 34, 58, 34, 48, 120, 50, 48, 97, 52, 97, 53, 52, 57, 57, 51, 98, 99, 57, 53, 97, 56, 50, 97, 49, 56, 97, 53, 51, 53, 101, 97, 55, 97, 97, 56, 98, 101, 49, 54, 49, 51, 51, 52, 49, 97, 56, 99, 51, 48, 53, 55, 100, 50, 97, 98, 52, 51, 100, 48, 56, 98, 51, 55, 54, 51, 50, 99, 53, 52, 34, 44, 34, 99, 104, 97, 105, 110, 73, 100, 34, 58, 34, 48, 120, 97, 97, 51, 54, 97, 55, 34, 44, 34, 102, 114, 111, 109, 34, 58, 34, 48, 120, 55, 101, 100, 55, 52, 54, 52, 55, 54, 97, 55, 102, 54, 53, 50, 48, 98, 97, 98, 100, 50, 52, 101, 101, 101, 49, 102, 100, 98, 99, 100, 48, 102, 55, 102, 98, 50, 55, 49, 102, 34, 44, 34, 103, 97, 115, 34, 58, 34, 48, 120, 102, 54, 49, 56, 34, 44, 34, 103, 97, 115, 80, 114, 105, 99, 101, 34, 58, 34, 48, 120, 49, 56, 57, 98, 49, 34, 44, 34, 105, 110, 112, 117, 116, 34, 58, 34, 48, 120, 34, 44, 34, 110, 111, 110, 99, 101, 34, 58, 34, 48, 120, 54, 49, 50, 53, 101, 34, 44, 34, 114, 34, 58, 34, 48, 120, 101, 50, 50, 48, 97, 53, 49, 56, 48, 102, 100, 100, 98, 52, 99, 101, 54, 98, 54, 53, 98, 99, 99, 56, 99, 56, 99, 55, 97, 48, 57, 55, 98, 49, 56, 101, 48, 55, 53, 51, 98, 50, 57, 101, 101, 57, 56, 98, 48, 51, 50, 52, 102, 57, 54, 56, 57, 51, 51, 51, 99, 55, 98, 50, 34, 44, 34, 115, 34, 58, 34, 48, 120, 54, 51, 100, 102, 102, 48, 52, 48, 52, 55, 102, 97, 102, 97, 54, 51, 99, 54, 100, 100, 101, 50, 51, 50, 101, 98, 51, 101, 56, 54, 48, 55, 56, 99, 57, 101, 57, 97, 50, 48, 55, 57, 101, 98, 55, 56, 99, 50, 51, 52, 51, 100, 49, 97, 57, 100, 101, 49, 54, 97, 99, 51, 52, 51, 34, 44, 34, 116, 111, 34, 58, 34, 48, 120, 98, 53, 49, 102, 57, 52, 97, 101, 101, 101, 98, 101, 53, 53, 97, 51, 55, 54, 48, 101, 56, 49, 54, 57, 97, 50, 50, 101, 53, 51, 54, 101, 98, 100, 51, 97, 54, 100, 99, 98, 34, 44, 34, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 100, 101, 120, 34, 58, 34, 48, 120, 51, 102, 34, 44, 34, 116, 121, 112, 101, 34, 58, 34, 48, 120, 48, 34, 44, 34, 118, 34, 58, 34, 48, 120, 49, 53, 52, 54, 100, 55, 49, 34, 44, 34, 118, 97, 108, 117, 101, 34, 58, 34, 48, 120, 54, 102, 48, 53, 98, 53, 57, 100, 51, 98, 50, 48, 48, 48, 48, 34, 125, 125];

        match serde_json::from_slice::<transaction::Root>(&body) {
            Ok(deserialized) => println!("Deserialized data: {:?}", deserialized),
            Err(e) => println!("An error occurred: {}", e),
        }
    }

    #[test]
    fn serde_test_receipt_bytes() {
        #[rustfmt::skip]
        let body = [123, 34, 106, 115, 111, 110, 114, 112, 99, 34, 58, 34, 50, 46, 48, 34, 44, 34, 105, 100, 34, 58, 49, 44, 34, 114, 101, 115, 117, 108, 116, 34, 58, 123, 34, 98, 108, 111, 99, 107, 72, 97, 115, 104, 34, 58, 34, 48, 120, 99, 56, 49, 53, 50, 98, 48, 48, 49, 57, 97, 49, 49, 51, 52, 55, 49, 51, 98, 100, 48, 51, 51, 50, 52, 57, 100, 53, 52, 48, 56, 55, 101, 49, 102, 53, 51, 100, 52, 50, 55, 101, 101, 50, 57, 56, 56, 97, 55, 51, 98, 53, 100, 50, 53, 52, 101, 48, 55, 51, 99, 52, 50, 54, 34, 44, 34, 98, 108, 111, 99, 107, 78, 117, 109, 98, 101, 114, 34, 58, 34, 48, 120, 52, 51, 100, 48, 100, 97, 34, 44, 34, 99, 111, 110, 116, 114, 97, 99, 116, 65, 100, 100, 114, 101, 115, 115, 34, 58, 110, 117, 108, 108, 44, 34, 99, 117, 109, 117, 108, 97, 116, 105, 118, 101, 71, 97, 115, 85, 115, 101, 100, 34, 58, 34, 48, 120, 49, 102, 97, 55, 52, 49, 34, 44, 34, 101, 102, 102, 101, 99, 116, 105, 118, 101, 71, 97, 115, 80, 114, 105, 99, 101, 34, 58, 34, 48, 120, 53, 57, 54, 56, 50, 102, 49, 48, 34, 44, 34, 102, 114, 111, 109, 34, 58, 34, 48, 120, 57, 53, 48, 48, 51, 52, 49, 98, 54, 98, 50, 52, 56, 51, 99, 50, 102, 48, 51, 53, 50, 52, 99, 101, 57, 53, 100, 53, 54, 98, 57, 57, 53, 57, 56, 100, 54, 97, 101, 48, 34, 44, 34, 103, 97, 115, 85, 115, 101, 100, 34, 58, 34, 48, 120, 53, 50, 48, 56, 34, 44, 34, 108, 111, 103, 115, 34, 58, 91, 93, 44, 34, 108, 111, 103, 115, 66, 108, 111, 111, 109, 34, 58, 34, 48, 120, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 48, 34, 44, 34, 115, 116, 97, 116, 117, 115, 34, 58, 34, 48, 120, 49, 34, 44, 34, 116, 111, 34, 58, 34, 48, 120, 98, 53, 49, 102, 57, 52, 97, 101, 101, 101, 98, 101, 53, 53, 97, 51, 55, 54, 48, 101, 56, 49, 54, 57, 97, 50, 50, 101, 53, 51, 54, 101, 98, 100, 51, 97, 54, 100, 99, 98, 34, 44, 34, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 72, 97, 115, 104, 34, 58, 34, 48, 120, 49, 57, 51, 56, 99, 56, 52, 51, 99, 50, 100, 98, 51, 49, 50, 51, 48, 101, 48, 98, 55, 51, 49, 98, 51, 97, 50, 57, 101, 57, 99, 57, 98, 51, 56, 101, 53, 54, 101, 48, 50, 99, 51, 48, 55, 54, 56, 99, 98, 57, 48, 53, 102, 56, 49, 50, 102, 56, 48, 53, 54, 52, 97, 50, 34, 44, 34, 116, 114, 97, 110, 115, 97, 99, 116, 105, 111, 110, 73, 110, 100, 101, 120, 34, 58, 34, 48, 120, 101, 34, 44, 34, 116, 121, 112, 101, 34, 58, 34, 48, 120, 50, 34, 125, 125];

        match serde_json::from_slice::<receipt::Root>(&body) {
            Ok(deserialized) => println!("Deserialized data: {:?}", deserialized),
            Err(e) => println!("An error occurred: {}", e),
        }
    }
}
