type LogEntry = record {
  counter : nat64;
  file : text;
  line : nat32;
  version : text;
  message : text;
  timestamp : nat64;
};
type NewField = record { value : nat64 };
type OperationStatus = variant { Fail; Success };
type PartitionDetail = record { len : nat64; name : text };
type ProcessedOperation = record {
  status : OperationStatus;
  method : text;
  error : opt text;
  new_field : nat64;
  another_new_field : NewField;
  timestamp : nat64;
};
type Result = variant { Ok; Err : text };
type Result_1 = variant { Ok : nat64; Err : text };
type State = record { ledger : vec nat8 };
type TimerEntry = record { id : nat64; time : nat64 };
type User = record {
  id : nat64;
  name : text;
  created_at : nat64;
  email : text;
  new_field : opt nat64;
};
service : () -> {
  add_user : (User) -> (opt User);
  add_user_with_operation : (User, ProcessedOperation) -> ();
  append_operation : (ProcessedOperation) -> (Result);
  get_backup_memory : () -> (vec nat8) query;
  get_operation : (nat64) -> (opt ProcessedOperation) query;
  get_operations_range : (nat64, nat64) -> (vec ProcessedOperation) query;
  get_operations_range_with_state : (nat64, nat64) -> (
      vec ProcessedOperation,
      vec User,
    ) query;
  get_partition : () -> (vec record { text; nat8 }) query;
  get_partition_details : () -> (vec PartitionDetail) query;
  get_state : () -> (State) query;
  get_timers : () -> (vec TimerEntry) query;
  get_user_len : () -> (nat64) query;
  get_users : () -> (vec User) query;
  print_log_entries : () -> (vec LogEntry) query;
  print_log_entries_page : (nat64, opt nat64) -> (vec text) query;
  schedule_task : (nat64, nat64) -> ();
  sum_and_log : (nat64, nat64) -> (nat64);
  sum_and_log_sub : (nat64, nat64) -> (Result_1);
  sum_and_log_sub_with_require : (nat64, nat64) -> (Result_1);
  update_state : (State) -> ();
}